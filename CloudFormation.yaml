AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create an EC2 instance, S3 bucket, RDS instance, Security Groups, IAM roles, API Gateway, and an inline Lambda function.

Resources:
  ## EC2 Instance ##
  AppEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.micro"
      ImageId: "ami-053b12d3152c0cc71"
      Tags:
        - Key: "Name"
          Value: "ec2_app_server_cloud_formation"
      SecurityGroupIds:
        - Ref: AppSecurityGroup
      IamInstanceProfile:
        Ref: EC2InstanceProfile

  ## S3 Bucket ##
  AppS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "s3-bucket-cloud-formation"
      AccessControl: "Private"
      VersioningConfiguration:
        Status: "Enabled"
      Tags:
        - Key: "Name"
          Value: "s3-bucket-cloud-formation"
        - Key: "Environment"
          Value: "Dev"

  ## RDS Instance ##
  AppRDSInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBInstanceIdentifier: "rds-instance"
      AllocatedStorage: 20
      DBInstanceClass: "db.t3.micro"
      Engine: "mysql"
      MasterUsername: "admin"
      MasterUserPassword: "Password123!" # Replace with a secure password
      PubliclyAccessible: false
      MultiAZ: false
      BackupRetentionPeriod: 7
      StorageType: "gp2"
      Tags:
        - Key: "Name"
          Value: "rds-instance"

  ## Security Group ##
  AppSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security group for EC2 instance"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0" # HTTP access
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0" # SSH access
      Tags:
        - Key: "Name"
          Value: "ec2-security-group"

  ## IAM Role for EC2 ##
  EC2InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "EC2InstancePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - !Sub "arn:aws:s3:::${AppS3Bucket}/*"

  ## IAM Instance Profile ##
  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - Ref: EC2InstanceRole

  ## API Gateway ##
  AppApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "AppApiGateway"
      Description: "API Gateway for the application"
      FailOnWarnings: true

  ## API Gateway Resource ##
  AppApiGatewayResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt AppApiGateway.RootResourceId
      RestApiId: !Ref AppApiGateway
      PathPart: "items"

  ## API Gateway Method ##
  AppApiGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      ResourceId: !Ref AppApiGatewayResource
      RestApiId: !Ref AppApiGateway
      Integration:
        IntegrationHttpMethod: "GET"
        Type: "MOCK"
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates:
          application/json: '{"statusCode": 200}'

  ## Lambda Function (Inline Code) ##
  AirportLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "airport_lambda_code_build_function"
      Runtime: nodejs20.x
      Role: !GetAtt AirportLambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              return {
                  statusCode: 200,
                  body: JSON.stringify("Hello from Lambda!"),
              };
          };
      Timeout: 10
      MemorySize: 128
      Tags:
        - Key: "Name"
          Value: "airport_lambda_code"

  ## IAM Role for Lambda ##
  AirportLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaS3AccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - !Sub "arn:aws:s3:::${AppS3Bucket}/*"
                  - !Sub "arn:aws:s3:::${AppS3Bucket}"

Outputs:
  EC2InstanceId:
    Description: "The ID of the created EC2 instance"
    Value: !Ref AppEC2Instance

  S3BucketName:
    Description: "The name of the created S3 bucket"
    Value: !Ref AppS3Bucket

  RDSInstanceEndpoint:
    Description: "The endpoint of the created RDS instance"
    Value: !GetAtt AppRDSInstance.Endpoint.Address

  ApiGatewayUrl:
    Description: "The URL of the created API Gateway"
    Value: !Sub "https://${AppApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
